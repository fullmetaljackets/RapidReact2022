// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Feeder m_feeder = new Feeder();
    public final Intake m_intake = new Intake();
    public final DriveTrain m_driveTrain = new DriveTrain();

// Joysticks
private final XboxController xboxCoDiver = new XboxController(1);
private final XboxController xboxDriver = new XboxController(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems
    SmartDashboard.putData(m_feeder);
    SmartDashboard.putData(m_intake);
    SmartDashboard.putData(m_driveTrain);


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("Intake_Cargo_Run: intake_Value", new Intake_Cargo_Run(.5, m_intake));
    SmartDashboard.putData("Intake_Cargo_Run: eject_Value", new Intake_Cargo_Run(-.5, m_intake));
    SmartDashboard.putData("Feeder_Run: inbound", new Feeder_Run(.5, m_feeder));
    SmartDashboard.putData("Feeder_Run: eject", new Feeder_Run(-.5, m_feeder));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_driveTrain.setDefaultCommand(new DriveWithJoysticks(() -> -xboxDriver.getRawAxis(1), () -> xboxDriver.getRawAxis(4), m_driveTrain ) );

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton xbox_Button_B = new JoystickButton(xboxCoDiver, XboxController.Button.kB.value);        
xbox_Button_B.whileHeld(new Feeder_Run(-.5, m_feeder) ,true);
    SmartDashboard.putData("Xbox_Button_B",new Feeder_Run(-.5, m_feeder) );

final JoystickButton xbox_Button_A = new JoystickButton(xboxCoDiver, XboxController.Button.kA.value);        
xbox_Button_A.whileHeld(new Feeder_Run(.5, m_feeder) ,true);
    SmartDashboard.putData("Xbox_Button_A",new Feeder_Run(.5, m_feeder) );

final JoystickButton xboxButton_Y = new JoystickButton(xboxCoDiver, XboxController.Button.kY.value);        
xboxButton_Y.whileHeld(new Intake_Cargo_Run(-.5, m_intake) ,true);
    SmartDashboard.putData("Xbox Button_Y",new Intake_Cargo_Run(-.5, m_intake) );

final JoystickButton xboxButton_X = new JoystickButton(xboxCoDiver, XboxController.Button.kX.value);        
xboxButton_X.whileHeld(new Intake_Cargo_Run(.5, m_intake) ,true);
    SmartDashboard.putData("Xbox Button_X",new Intake_Cargo_Run(.5, m_intake) );



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getXboxDriver() {
      return xboxDriver;
    }

public XboxController getXboxCoDiver() {
      return xboxCoDiver;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

